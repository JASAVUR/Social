diff --git a/node_modules/react-native-web/dist/vendor/react-native/VirtualizedList/index.js b/node_modules/react-native-web/dist/vendor/react-native/VirtualizedList/index.js
index 05a53ed..f8a5836 100644
--- a/node_modules/react-native-web/dist/vendor/react-native/VirtualizedList/index.js
+++ b/node_modules/react-native-web/dist/vendor/react-native/VirtualizedList/index.js
@@ -34,6 +34,7 @@ import * as React from 'react';
 import RefreshControl from '../../../exports/RefreshControl';
 import ScrollView from '../../../exports/ScrollView';
 import StyleSheet from '../../../exports/StyleSheet';
+import Platform from '../../../exports/Platform';
 import UIManager from '../../../exports/UIManager';
 import View from '../../../exports/View';
 import ViewabilityHelper from '../ViewabilityHelper';
@@ -650,6 +651,8 @@ var VirtualizedList = /*#__PURE__*/function (_React$PureComponent) {
             // we will trust the initialScrollIndex suggestion.
             if (!_this.props.initialScrollIndex || _this._scrollMetrics.offset) {
               newState = computeWindowedRenderLimits(_this.props, state, _this._getFrameMetricsApprox, _this._scrollMetrics);
+              // See https://github.com/necolas/react-native-web/issues/1579
+              newState.first = 0;
             }
           }
         } else {
@@ -801,10 +804,34 @@ var VirtualizedList = /*#__PURE__*/function (_React$PureComponent) {
       }
     }
 
+    _this.invertedWheelEvent = (ev) => {
+      if (_this.props.inverted) {
+        _this.getScrollableNode().scrollTop -= ev.deltaY;
+        ev.preventDefault();
+      }
+    }
+
     _this.state = initialState;
     return _this;
   }
 
+  _proto.setupWebWheelHack = function setupWebWheelHack() {
+    if (!this._scrollRef) {
+      setTimeout(() => this.setupWebWheelHack(), 50);
+      return
+    }
+    this.getScrollableNode().addEventListener("wheel",
+      this.invertedWheelEvent
+    );
+  }
+
+  _proto.teardownWebWheelHack = function teardownWebWheelHack() {
+      if (!this._scrollRef) return
+      this.getScrollableNode().removeEventListener("wheel",
+        this.invertedWheelEvent
+      );
+  }
+
   _proto.componentDidMount = function componentDidMount() {
     if (this._isNestedWithSameOrientation()) {
       this.context.registerAsNestedChild({
@@ -818,6 +845,9 @@ var VirtualizedList = /*#__PURE__*/function (_React$PureComponent) {
         parentDebugInfo: this.context.debugInfo
       });
     }
+    if (Platform.OS === 'web') {
+      this.setupWebWheelHack();
+    }
   };
 
   _proto.componentWillUnmount = function componentWillUnmount() {
@@ -843,6 +873,10 @@ var VirtualizedList = /*#__PURE__*/function (_React$PureComponent) {
     });
 
     this._fillRateHelper.deactivateAndFlush();
+
+    if (Platform.OS === 'web') {
+      this.teardownWebWheelHack();
+    }
   };
 
   VirtualizedList.getDerivedStateFromProps = function getDerivedStateFromProps(newProps, prevState) {
